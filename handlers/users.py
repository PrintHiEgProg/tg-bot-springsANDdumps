from aiogram import Router, types, F
from aiogram.client import bot
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from handlers.keyboards.start_keyboard import get_location_kb, COMBO_get_many_AND_give_wedSite, status_water, \
    status_dump, resize_dump, no_photo

user_router = Router()

#–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–∞–ª–æ–∫
dumpFile = open("database_springs.db", "r")
dumpdump = set ()
for line in dumpFile:
    dumpdump.add(line.strip())
#–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–Ω–∏–∫–æ–≤
joinedFile = open("database_springs.db", "r")
joinedUsers = set ()
for line in joinedFile:
    joinedUsers.add(line.strip())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@user_router.message(Command('start')) #–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
async def start(message: types.Message, state: FSMContext) -> None:
    text = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–¥–Ω–∏–∫–∞—Ö –∏ —Å–≤–∞–ª–∫–∞—Ö.'

    Cg = COMBO_get_many_AND_give_wedSite()
    user_id = message.from_user.id

    await message.answer(text, reply_markup=Cg)

@user_router.message(Command('support')) #–ü–æ–¥–¥–µ—Ä–∂–∫–∞
async def support(message: types.Message, state: FSMContext) -> None:
    await message.answer('–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É: ')
    await state.set_state(Form.support_listener)



@user_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ–¥–Ω–∏–∫ üö∞")
async def site(message: types.Message, state: FSMContext) -> None:
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ–¥–Ω–∏–∫ üö∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å\n–ü—Ä–∏–º–µ—Ä: –°–≤—è—Ç–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.text)

@user_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–≤–∞–ª–∫—É –º—É—Å–æ—Ä–∞ üóëÔ∏è")
async def site(message: types.Message, state: FSMContext) -> None:
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–≤–∞–ª–∫—É –º—É—Å–æ—Ä–∞ üóëÔ∏è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–∞–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å\n–ü—Ä–∏–º–µ—Ä: –°–≤–∞–ª–∫–∞ —É –ê–∑–æ–≤—Å–∫–æ–≥–æ –º–æ—Ä—è', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.text_dump)










class Form(StatesGroup):
    text = State()
    photo = State()
    no_photo = State()
    location = State()
    tags = State()
    description = State()
    status = State()
    resize_dump = State()
    text_dump = State()
    description_dump = State()
    photo_dump = State()
    no_photo_dump = State()
    status_dump = State()
    tags_dump = State()
    support_listener = State()

admin_id = 989926239
@user_router.message(Form.support_listener, F.content_type == ContentType.TEXT)
async def send_message(message: types.Message, state: FSMContext) -> None:
    await state.update_data(report_message=message.text)
    report_data = await state.get_data()
    report_message = report_data['report_message']

    print(report_message)





@user_router.message(Form.text_dump, F.content_type == ContentType.TEXT)
async def photo_received(message: types.Message, state: FSMContext):
    await state.update_data(name_dump=message.text)
    user_data = await state.get_data()
    a = user_data['name_dump']
    print(a)
    kb = get_location_kb()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Å–≤–∞–ª–∫–∏\n–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ä—è–¥–æ–º —Å –Ω–µ–π.", reply_markup=kb)



    # Set state
    await state.set_state(Form.description_dump)

@user_router.message(Form.description_dump, F.content_type == ContentType.LOCATION)
async def photo_received(message: types.Message, state: FSMContext):
    await state.update_data(location_dump=(message.location.longitude, message.location.latitude))
    user_data = await state.get_data()
    b = user_data['location_dump']
    print(b)
    Cg = COMBO_get_many_AND_give_wedSite()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–≤–∞–ª–∫–∏.", reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(Form.photo_dump)


@user_router.message(Form.photo_dump, F.content_type == ContentType.TEXT)
async def photo_received(message: types.Message, state: FSMContext):
    await state.update_data(description_dump=message.text)
    user_data = await state.get_data()
    c = user_data['description_dump']
    print(c)

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–≤–∞–ª–∫–∏.")

    await state.set_state(Form.status_dump)


@user_router.message(Form.status_dump, F.content_type == ContentType.PHOTO)
async def photo_received(message: types.Message, state: FSMContext):
    print(message.photo)
    await state.update_data(photo_dump=message.photo[-1].file_id)

    user_data = await state.get_data()
    d = user_data['photo_dump']
    print(d)
    SD = status_dump()
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞.", reply_markup=SD)
    # Set state
    await state.set_state(Form.tags_dump)




@user_router.message(Form.tags_dump, F.content_type == ContentType.TEXT)
async def tags_received(message: types.Message, state: FSMContext):
    await state.update_data(status_dump=message.text)
    RD = resize_dump()
    user_data = await state.get_data()
    e = user_data['status_dump']
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–≤–∞–ª–∫–∏.', reply_markup=RD)
    await state.set_state(Form.resize_dump)

@user_router.message(Form.resize_dump, F.content_type == ContentType.TEXT)
async def tags_received(message: types.Message, state: FSMContext):
    await state.update_data(resize_dump=message.text)

    user_data = await state.get_data()
    e = user_data['resize_dump']
    print(e)
    Cg = COMBO_get_many_AND_give_wedSite()

    print(user_data)
    a = user_data['name_dump']
    b = user_data['location_dump']
    c = user_data['description_dump']
    d = user_data['photo_dump']
    e = user_data['status_dump']
    f = user_data['resize_dump']

    print(a)
    print(b)
    print(c)
    print(d)
    print(e)
    print(f)

    if f == '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (> 16–≥–∞) üü£':
        f = '–ë–æ–ª—å—à–µ 16–≥–∞'
    else:
        if f == '–ë–æ–ª—å—à–∞—è (12-16–≥–∞) üî¥':
            f = '12-16–≥–∞'
        else:
            if f == '–°—Ä–µ–¥–Ω—è—è (8-12–≥–∞) üü°':
                f = '8-12–≥–∞'
            else:
                if f == '–ù–µ–±–æ–ª—å—à–∞—è (4-8–≥–∞) üü¢':
                    f = '4-8–≥–∞'
                else:
                    if f == '–ú–µ–ª–∫–∞—è (< 4–≥–∞) ‚úÖ':
                        f = '–ú–µ–Ω—å—à–µ 4–≥–∞'
                    else:
                        f = f
    photo = user_data['photo_dump']
    full_dump_report = 'dump[1] = ' + str(a) + '\ndump[2] ' + str(b) + '\ndump[3] = ' + str(c) + '\ndump[4] =  ' + str(e) + '\ndump[5] =  ' + str(f)

    await message.answer('<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–∞–ª–∫–µ:</b>\n–ù–∞–∑–≤–∞–Ω–∏–µ: ' + str(a) + '\n–õ–æ–∫–∞—Ü–∏—è: ' + str(b) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(c) + '\n–¢–∏–ø –º—É—Å–æ—Ä–∞: ' + str(e) + '\n–†–∞–∑–º–µ—Ä: ' + str(f), parse_mode='html')
    print(full_dump_report)
    if not str(full_dump_report) in dumpdump:
        dumpFile = open("database_dumps.db", "w+")
    dumpFile.write(str(full_dump_report) + "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\n")
    dumpdump.add(full_dump_report)
    await message.answer(f"–°–≤–∞–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ‚úÖ\n–ø–æ–∫–∞ –∂–¥—ë—à—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–≤–∞–ª–∫–∏ –∑–∞–≥–ª—è–Ω–∏ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=Cg)

    await message.answer("–ò –∫—Å—Ç–∞—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏ –Ω–∞—Å –¥–µ–Ω—é–∂–∫–æ–π –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")

    print(user_data)
    a = user_data['name_dump']
    b = user_data['location_dump']
    c = user_data['description_dump']
    d = user_data['photo_dump']
    e = user_data['status_dump']

    print(a)
    print(b)
    print(c)
    print(d)
    print(e)
    # Reset state
    user_data.clear()
    await state.clear()


@user_router.message(Form.text, F.content_type == ContentType.TEXT)
async def photo_received(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    user_data = await state.get_data()
    kb = get_location_kb()

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Ä–æ–¥–Ω–∏–∫–∞\n–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ä—è–¥–æ–º —Å –Ω–∏–º.", reply_markup=kb)



    # Set state
    await state.set_state(Form.description)




@user_router.message(Form.description, F.content_type == ContentType.LOCATION)
async def photo_received(message: types.Message, state: FSMContext):
    await state.update_data(location=(message.location.longitude, message.location.latitude))
    user_data = await state.get_data()
    Cg = COMBO_get_many_AND_give_wedSite()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–¥–Ω–∏–∫–∞.", reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(Form.photo)

@user_router.message(Form.photo, F.content_type == ContentType.TEXT)
async def photo_received(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    user_data = await state.get_data()
    c = user_data['description']
    print(c)
    NP = no_photo()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–æ–¥–Ω–∏–∫–∞.")
    await state.set_state(Form.status)

@user_router.message(Form.status, F.content_type == ContentType.PHOTO)
async def photo_received(message: types.Message, state: FSMContext):
    print(message.photo)
    await state.update_data(photo=message.photo[-1].file_id)

    user_data = await state.get_data()
    d = user_data['photo']
    print(d)
    SW = status_water()
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç—É—Å —É—Ö–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–æ–¥–Ω–∏–∫–∞.", reply_markup=SW)
    # Set state
    await state.set_state(Form.tags)


@user_router.message(Form.tags, F.content_type == ContentType.TEXT)
async def tags_received(message: types.Message, state: FSMContext):
    await state.update_data(status=message.text)

    user_data = await state.get_data()
    Cg = COMBO_get_many_AND_give_wedSite()





    print(user_data)
    a = user_data['name']
    b = user_data['location']
    c = user_data['description']
    d = user_data['photo']
    e = user_data['status']

    print(a)
    print(b)
    print(c)
    print(d)
    print(e)


    full_spring_report = 'spring[1] = ' + str(a) + '\nspring[2] = ' + str(b) + '\nspring[3] = ' + str(c) + '\nspring[4] = ' + str(d) + '\nspring[5] = ' + str(e)

    await message.answer('<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–Ω–∏–∫–µ:</b>\n–ù–∞–∑–≤–∞–Ω–∏–µ: ' + str(a) + '\n–õ–æ–∫–∞—Ü–∏—è: ' + str(b) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(c) + '\n–°—Ç–∞—Ç—É—Å: ' + str(e), parse_mode='html')
    print(full_spring_report)
    if not str(full_spring_report) in joinedUsers:
        joinedFile = open("database_springs.db", "w+")
    joinedFile.write(str(full_spring_report) + "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\n")
    joinedUsers.add(full_spring_report)
    await message.answer(f"–†–æ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ‚úÖ\n–ø–æ–∫–∞ –∂–¥—ë—à—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–æ–¥–Ω–∏–∫–∞ –∑–∞–≥–ª—è–Ω–∏ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=Cg)

    await message.answer("–ò –∫—Å—Ç–∞—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏ –Ω–∞—Å –¥–µ–Ω—é–∂–∫–æ–π –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")

    print(user_data)
    a = user_data['name']
    b = user_data['location']
    c = user_data['description']
    d = user_data['photo']
    e = user_data['status']

    print(a)
    print(b)
    print(c)
    print(d)
    print(e)
    # Reset state
    user_data.clear()
    await state.clear()


